{"name": "test_customer_logout[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n\tGetHandleVerifier [0x0x85fe43+66515]\n\tGetHandleVerifier [0x0x85fe84+66580]\n\t(No symbol) [0x0x64dc48]\n\t(No symbol) [0x0x698704]\n\t(No symbol) [0x0x698aab]\n\t(No symbol) [0x0x6df482]\n\t(No symbol) [0x0x6bb214]\n\t(No symbol) [0x0x6dcba7]\n\t(No symbol) [0x0x6bafc6]\n\t(No symbol) [0x0x68c2ca]\n\t(No symbol) [0x0x68d154]\n\tGetHandleVerifier [0x0xab7353+2521315]\n\tGetHandleVerifier [0x0xab22d3+2500707]\n\tGetHandleVerifier [0x0x887c94+229924]\n\tGetHandleVerifier [0x0x8781f8+165768]\n\tGetHandleVerifier [0x0x87ecad+193085]\n\tGetHandleVerifier [0x0x868158+100072]\n\tGetHandleVerifier [0x0x8682f0+100480]\n\tGetHandleVerifier [0x0x8525aa+11066]\n\tBaseThreadInitThunk [0x0x762b5d49+25]\n\tRtlInitializeExceptionChain [0x0x772fd6db+107]\n\tRtlGetAppContainerNamedObjectPath [0x0x772fd661+561]", "trace": "driver = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"1425d43fa6c754ad2801d538868302e5\")>\n\n    @pytest.mark.login\n    def test_customer_logout(driver):\n        \"\"\"Verify Customer can log out successfully\"\"\"\n        login = LoginPage(driver)\n        login.open(BASE_URL)\n        login.click_customer_login()\n        login.select_user(\"Harry Potter\")\n        login.click_login()\n    \n        logout_btn = (By.CSS_SELECTOR, \"button[ng-click='byebye()']\")\n        WebDriverWait(driver, 15).until(EC.element_to_be_clickable(logout_btn)).click()\n    \n        home_login_btn = (By.XPATH, \"//button[contains(text(),'Customer Login')]\")\n>       WebDriverWait(driver, 15).until(EC.visibility_of_element_located(home_login_btn))\n\ntests\\test_login.py:227: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"1425d43fa6c754ad2801d538868302e5\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x0000020ACF59F9C0>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x85fe43+66515]\nE       \tGetHandleVerifier [0x0x85fe84+66580]\nE       \t(No symbol) [0x0x64dc48]\nE       \t(No symbol) [0x0x698704]\nE       \t(No symbol) [0x0x698aab]\nE       \t(No symbol) [0x0x6df482]\nE       \t(No symbol) [0x0x6bb214]\nE       \t(No symbol) [0x0x6dcba7]\nE       \t(No symbol) [0x0x6bafc6]\nE       \t(No symbol) [0x0x68c2ca]\nE       \t(No symbol) [0x0x68d154]\nE       \tGetHandleVerifier [0x0xab7353+2521315]\nE       \tGetHandleVerifier [0x0xab22d3+2500707]\nE       \tGetHandleVerifier [0x0x887c94+229924]\nE       \tGetHandleVerifier [0x0x8781f8+165768]\nE       \tGetHandleVerifier [0x0x87ecad+193085]\nE       \tGetHandleVerifier [0x0x868158+100072]\nE       \tGetHandleVerifier [0x0x8682f0+100480]\nE       \tGetHandleVerifier [0x0x8525aa+11066]\nE       \tBaseThreadInitThunk [0x0x762b5d49+25]\nE       \tRtlInitializeExceptionChain [0x0x772fd6db+107]\nE       \tRtlGetAppContainerNamedObjectPath [0x0x772fd661+561]\n\n..\\.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:138: TimeoutException"}, "description": "Verify Customer can log out successfully", "parameters": [{"name": "browser_name", "value": "'chrome'"}], "start": 1761203453171, "stop": 1761203473268, "uuid": "a182d9ce-8796-496b-bcd4-c280b7c3c4b6", "historyId": "38fa239438c3fe78db8fd4ea7010c42a", "testCaseId": "f30a0499001ae5d3cb33bba42788106a", "fullName": "tests.test_login#test_customer_logout", "labels": [{"name": "tag", "value": "login"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "ASCENDI-L5N0U9N"}, {"name": "thread", "value": "5188-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}], "titlePath": ["tests", "test_login.py"]}